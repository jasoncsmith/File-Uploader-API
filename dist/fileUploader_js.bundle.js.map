{"version":3,"file":"fileUploader_js.bundle.js?ver=253e4d9df74607372e8c","mappings":"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","sources":["webpack://appLaunch/./src/utils/utilsNumber.ts","webpack://appLaunch/./src/components/fileUploader/fileUploader.ts","webpack://appLaunch/./src/utils/utilsObjects.ts"],"sourcesContent":["export function formatBytes(bytes: number): string {\n/* \nIt's convenient within the computer to organize things in groups of powers of\n2. For example, 2^10 is 1024, and so a program might group 1024 items \ntogether, as a sort of \"round\" number of things within the computer. The term \n\"kilobyte\" above refers to this group size of 1024 things. However, people \nalso group things by thousands -- 1 thousand or 1 million items.\nThere's this problem with the word \"megabyte\": does it mean 1024 * 1024 bytes,\ni.e. 2^20, which is 1,048,576, or does it mean exactly 1 million, 1000 * 1000.\nIt's just a 5% difference, but marketers tend to prefer the 1 million \ninterpretation, since it makes their hard drives etc. appear to hold a little\nbit more.\nhttps://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\n*/\n    const units: string[] = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i: number;\n \n    for (i = 0; bytes >= 1024 && i < 4; i++) {\n        bytes /= 1024;\n    }\n \n    return `${bytes.toFixed(1)}${units[i]}`;\n}","import \"./fileUploader.scss\";\nimport { containsIllegalfileNameChars } from \"../../utils/utils.ts\";\nimport { objMerge } from \"../../utils/utilsObjects.ts\";\nimport { formatBytes } from \"../../utils/utilsNumber.ts\";\nimport DOMPurify from \"dompurify\";\nimport { IFileUploaderOptions, IjFile } from \"../interfaces.ts\";\n// const hashSupportedExtToMIMEImage = {\n//     jpg: 'image/jpeg',\n//     jpeg: 'image/jpeg',\n//     png: 'image/png',\n//     gif: 'image/gif',\n//     tif: 'image/tiff',\n//     tiff: 'image/tiff',\n//     bmp: 'image/bmp',\n//     pdf: 'application/pdf'\n// };\n\nconst whiteList: string[] = [];\nconst maxFileNameChars = 120;\nlet countInitializedInstances = 0; // when > 1 fileUploaders on same page\n\ninterface ResultFileSanitization {\n    isValid: boolean;\n    foundLength: number;\n}\n\nclass jFile implements IjFile {\n    filename: string;\n    totalfilesize: number;\n    file: File;\n\n    constructor(file: File) {\n        this.filename = file.name;\n        this.totalfilesize = file.size;\n        this.file = file;\n    }\n}\n\nclass FileListItem {\n    fileName: string;\n    src: string | null;\n    size: string;\n\n    constructor(file: File) {\n        this.fileName = file.name;\n        this.src = null;\n        this.size = formatBytes(file.size);\n    }\n}\n\nclass Vm {\n    private kp = ko.postbox;\n    // const self = this;\n\n    private elDropArea: HTMLDivElement | null = null;\n    private elFileInput: HTMLInputElement | null = null;\n\n    private queuedFileTransfers: Array<jFile> = [];\n    private allowedFileTypes = \"*\";\n\n    private configApi: (a: object) => jFile | null = null;\n    private configMultiple = false;\n    private configValidateContent: boolean | null = false;\n    private configMaxFileSize: number | null = null;\n    private configAllowedFileExtensions: string[] = [];\n\n    fileListItems: KnockoutObservableArray<FileListItem> = ko.observableArray(\n        []\n    );\n    isFileReadyForUpload: KnockoutObservable<boolean> = ko\n        .observable(false)\n        .extend({\n            notify: \"always\",\n        });\n    selectedFileName: KnockoutObservable<string | null> = ko.observable(null);\n    elemIdFileInput: KnockoutObservable<string> = ko.observable(\"\");\n    textButton: KnockoutObservable<string> = ko.observable(null);\n    textLabel: KnockoutObservable<string> = ko.observable(null);\n    textAllowedExt: KnockoutObservable<string> = ko.observable(null);\n    isWaiting: KnockoutObservable<boolean> = ko.observable(false);\n\n    constructor() {\n        countInitializedInstances++;\n    }\n\n    private preventDefaults(e: Event): void {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    private highlight(): void {\n        this.elDropArea &&\n            this.elDropArea.classList.add(\n                \"file-upload__drop-area--is-dragover\"\n            );\n    }\n\n    private unhighlight(): void {\n        this.elDropArea &&\n            this.elDropArea.classList.remove(\n                \"file-upload__drop-area--is-dragover\"\n            );\n    }\n\n    private validateFileSize(args: File): boolean {\n        return this.configMaxFileSize === null\n            ? true\n            : args.size <= this.configMaxFileSize;\n    }\n\n    private validateFileExtension(extension: string): boolean {\n        return this.configAllowedFileExtensions.length === 0\n            ? true\n            : this.configAllowedFileExtensions.indexOf(\n                  extension.toLowerCase()\n              ) !== -1;\n    }\n\n    private validateFileNameIllegalChars(args: File): boolean {\n        return containsIllegalfileNameChars(args.name) === false;\n    }\n\n    private validateFileNameLength(args: File): boolean {\n        return args.name.length <= maxFileNameChars;\n    }\n\n    private validateFileContent(args: File): Promise<ResultFileSanitization> {\n        const reader: FileReader = new FileReader();\n\n        return new Promise((resolve, reject) => {\n            reader.onloadend = function (e: ProgressEvent<FileReader>) {\n                const readerResult = <string>e.target.result;\n                let totalWhiteList = 0;\n\n                DOMPurify.sanitize(readerResult);\n                const violations = DOMPurify.removed;\n                // IF SANITIZED != READERRESULT AND VIOLATIONS.LENGTH > 0\n                // THIS MEANS DOMPURIFY ESCAPED CONTENT -- WE ARE NOT CONCERNED\n                // WITH THIS.\n\n                for (let i = 0, len = whiteList.length; i < len; i++) {\n                    totalWhiteList += (\n                        readerResult.match(new RegExp(whiteList[i], \"gi\")) || []\n                    ).length;\n                }\n\n                resolve({\n                    isValid:\n                        violations.length === 0 ||\n                        (violations.length > 0 &&\n                            totalWhiteList === violations.length),\n                    foundLength: Math.abs(violations.length - totalWhiteList),\n                });\n            };\n            reader.onerror = () => {\n                reader.abort();\n                reject(\"There was an error reading the file.\");\n            };\n            reader.readAsText(args);\n        });\n    }\n\n    private async validate(file: File): Promise<boolean> {\n        if (this.validateFileNameIllegalChars(file) === false) {\n            this.notifyValidationFailuresFileName(file);\n            return false;\n        }\n\n        const ext: string = this.getFileExtension(file);\n        if (this.validateFileExtension(ext) === false) {\n            this.notifyValidationFailuresExtension(ext);\n            return false;\n        }\n\n        if (this.validateFileNameLength(file) === false) {\n            this.notifyValidationFailuresFileNameLength();\n            return false;\n        }\n\n        if (this.validateFileSize(file) === false) {\n            this.notifyValidationFailuresSizeLimit(file);\n            return false;\n        }\n\n        if (this.configValidateContent === true && file.type === \"text/plain\") {\n            const result: ResultFileSanitization =\n                await this.validateFileContent(file);\n\n            if (result.isValid === false) {\n                this.notifyValidationFailuresContent(result.foundLength);\n                return false;\n            } else {\n                this.notifyValidationSuccessContent();\n            }\n        }\n\n        return true;\n    }\n\n    private notifyValidationFailuresSizeLimit(args: { name: string }): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"invalid\",\n            content: `File <strong>${\n                args.name\n            }</strong> exceeds the <strong>${formatBytes(\n                this.configMaxFileSize\n            )}</strong> size limit and will not be uploaded.`,\n            isPersistant: true,\n        });\n    }\n\n    private notifyValidationFailuresExtension(ext: string): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"invalid\",\n            content: `File type <strong>${ext}</strong> is not permitted, only <strong>${this.configAllowedFileExtensions.join(\n                \", \"\n            )}</strong> are accepted.`,\n            isPersistant: true,\n        });\n    }\n\n    private notifyValidationFailuresFileName(args: { name: string }): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"invalid\",\n            content: `Please rename file <strong>${args.name}</strong>. Filenames cannot contain <strong>\\\\ / : * ? \" < > |</strong>`,\n            isPersistant: true,\n        });\n    }\n\n    private notifyValidationFailuresFileNameLength(): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"invalid\",\n            content: `File name cannot exceed <strong>${maxFileNameChars}</strong> characters in length. Please shorten the file name.`,\n            isPersistant: true,\n        });\n    }\n\n    private notifyValidationFailuresContent(foundLength: number): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"invalid\",\n            content: `We have detected <strong>${foundLength} issue${\n                foundLength === 1 ? \"\" : \"s\"\n            }</strong> with this file. Upload Blocked.`,\n            isPersistant: true,\n        });\n    }\n\n    private notifyValidationSuccessContent(): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"valid\",\n            content: `Success. DOMPurify found 0 issues with this file`,\n        });\n    }\n\n    private getFileExtension(args: File): string {\n        if (typeof args.name !== \"string\") {\n            throw new Error(\"fileName must be a string\");\n        }\n\n        const fileName: string = args.name;\n        const index: number = fileName.lastIndexOf(\".\");\n\n        if (index === -1) {\n            return \"\";\n        }\n\n        return `.${fileName.substring(index + 1, fileName.length)}`;\n    }\n\n    // #FIX, the any\n    private handleDrop = (e: any): void => {\n        e.preventDefault();\n        this.setFiles(e.dataTransfer.files);\n    };\n\n    private handleSubmit = (e: Event): void => {\n        this.setFiles((<HTMLInputElement>e.target).files);\n    };\n\n    /**\n     * @param fileList input will be fileList or Event object\n     * @return undefined\n     */\n    private async setFiles(input: FileList): Promise<void> {\n        if (input.length === 0) {\n            return;\n        }\n\n        const filesRaw =\n            this.configMultiple === false ? [input[0]] : [...input];\n\n        if (this.elFileInput) {\n            this.elFileInput.value = \"\"; // WE HAVE TO KEEP IT EMPTY OR YOU CANNOT UPLOAD A FILE YOU DELETED. EVERYTHING IS MANAGED IN THE que\n        }\n\n        if (this.configMultiple === false && input.length > 1) {\n            this.kp.publish(\"add-application-message\", {\n                type: \"information\",\n                content: `Only <strong>one file</strong> may be dropped at a time. <strong>${filesRaw[0].name}</strong> was accepted, the others have been removed.`,\n            });\n        }\n\n        filesRaw.forEach(async (f: File) => {\n            if ((await this.validate(f)) === true) {\n                this.queueFileTransfers(f);\n            }\n        });\n    }\n\n    private queueFileTransfers(rawFile: File): void {\n        // will be the one that is dragged or the last one. Only wil truly work in case of single\n        this.selectedFileName(rawFile.name);\n\n        this.configMultiple === false\n            ? (this.queuedFileTransfers = [new jFile(rawFile)])\n            : this.queuedFileTransfers.push(new jFile(rawFile));\n\n        this.renderFileListItem(rawFile);\n\n        this.isFileReadyForUpload(true);\n    }\n\n    private renderFileListItem(file: File): void {\n        const listItem = new FileListItem(file);\n\n        if (file.type.includes(\"image/\")) {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onloadend = (e: ProgressEvent<FileReader>) => {\n                listItem.src = <string>e.target.result;\n                this.configMultiple === false\n                    ? this.fileListItems([listItem])\n                    : this.fileListItems.push(listItem);\n            };\n        } else {\n            this.configMultiple === false\n                ? this.fileListItems([listItem])\n                : this.fileListItems.push(listItem);\n        }\n    }\n\n    private setDom(el: Element): void {\n        if (el === null) {\n            return;\n        }\n\n        this.elDropArea = el.querySelector(\".file-upload__drop-area\");\n        this.elFileInput = el.querySelector(\".file-upload__input-file\");\n\n        if (this.elDropArea === null || !this.elFileInput === null) {\n            throw new Error(\"Elements required.\");\n        }\n\n        [\"dragenter\", \"dragover\", \"dragleave\", \"drop\"].forEach((eventName) => {\n            this.elDropArea.addEventListener(\n                eventName,\n                this.preventDefaults,\n                false\n            );\n        });\n\n        [\"dragenter\", \"dragover\"].forEach((eventName) => {\n            this.elDropArea.addEventListener(eventName, this.highlight, false);\n        });\n\n        [\"dragleave\", \"drop\"].forEach((eventName) => {\n            this.elDropArea.addEventListener(\n                eventName,\n                this.unhighlight,\n                false\n            );\n        });\n\n        this.elDropArea.addEventListener(\"drop\", this.handleDrop, false);\n\n        this.elDropArea.addEventListener(\"input\", this.handleSubmit, false);\n\n        if (this.configMultiple === true) {\n            this.elFileInput.setAttribute(\"multiple\", \"multiple\");\n        }\n\n        if (this.configAllowedFileExtensions.length > 0) {\n            this.allowedFileTypes = this.configAllowedFileExtensions.join(\",\");\n        }\n\n        this.elFileInput.setAttribute(\"accept\", `${this.allowedFileTypes}`);\n    }\n\n    private notifySuccess(args: jFile): void {\n        this.kp.publish(\"add-application-message\", {\n            type: \"valid\",\n            content: `File ${args.filename} has been uploaded successfully`,\n        });\n    }\n\n    public deleteQueuedFile = (obj: FileListItem): void => {\n        const qf = this.queuedFileTransfers.find(\n            (f) => f.filename === obj.fileName\n        );\n\n        if (typeof qf === \"undefined\") {\n            throw new Error(\"queued file transfer not found.\");\n        }\n\n        this.queuedFileTransfers.splice(\n            this.queuedFileTransfers.indexOf(qf),\n            1\n        );\n\n        this.fileListItems.remove(obj);\n\n        this.isFileReadyForUpload(this.fileListItems().length > 0);\n\n        if (obj.fileName === this.selectedFileName()) {\n            this.selectedFileName(null);\n        }\n    };\n\n    /**\n     * reset - governing vm can invoke\n     * @param undefined\n     * @return undefined\n     */\n    public reset = (): void => {\n        this.queuedFileTransfers = [];\n        this.fileListItems([]);\n        this.selectedFileName(null);\n        this.isFileReadyForUpload(false);\n        this.isWaiting(false);\n    };\n\n    public uploadFile = (): Promise<void> => {\n        const uploads: Array<jFile> = [];\n\n        if (this.queuedFileTransfers.length === 0) {\n            return Promise.reject(\"Please select a file to upload.\");\n        }\n\n        this.queuedFileTransfers.forEach((ft: jFile) =>\n            uploads.push(this.configApi(objMerge({}, ft)))\n        );\n\n        this.isWaiting(true);\n\n        return Promise.all(uploads)\n            .then((resp) => resp.forEach((f) => this.notifySuccess(f)))\n            .catch((err) => {\n                this.kp.publish(\"add-application-message\", {\n                    type: \"invalid\",\n                    content: err,\n                });\n                this.isWaiting(false);\n            })\n            .finally(this.reset);\n    };\n\n    public initialize(args: IFileUploaderOptions): void {\n        this.configApi = args.endpoint;\n        this.configMultiple = args.allowsMultiple;\n        this.configMaxFileSize = args.maxFileSize;\n        this.configValidateContent = args.validatePlainTextContent;\n        this.configAllowedFileExtensions = args.allowedExtensions || [];\n\n        this.textLabel(args.labelText);\n        this.textButton(\n            this.configMultiple === true\n                ? `${args.labelButton}(s)`\n                : args.labelButton\n        );\n        this.elemIdFileInput(`file-elem-${countInitializedInstances}`);\n\n        if (this.configAllowedFileExtensions.length > 0) {\n            this.textAllowedExt(\n                `Accepted: ${this.configAllowedFileExtensions.join(\", \")}`\n            );\n        }\n\n        this.setDom(args.el);\n    }\n}\n\nexport default Vm;\n","/** \n* Properties in the target object are overwritten by \n* properties in the sources if they have the same key. \n* Later sources' properties overwrite earlier ones.\n\n* @param object target\n* @param object source\n* @return object merged target/source\n*/\nexport function objMerge(target: object, source: object): object {\n    return Object.assign(target, source);\n}"],"names":["formatBytes","bytes","i","toFixed","whiteList","countInitializedInstances","jFile","file","this","filename","name","totalfilesize","size","FileListItem","fileName","src","Vm","ko","postbox","observableArray","observable","extend","notify","e","preventDefault","setFiles","dataTransfer","files","target","obj","qf","queuedFileTransfers","find","f","Error","splice","indexOf","fileListItems","remove","isFileReadyForUpload","length","selectedFileName","isWaiting","uploads","Promise","reject","forEach","ft","push","configApi","source","Object","assign","all","then","resp","notifySuccess","err","kp","publish","type","content","reset","stopPropagation","elDropArea","classList","add","args","configMaxFileSize","extension","configAllowedFileExtensions","toLowerCase","containsIllegalfileNameChars","reader","FileReader","resolve","onloadend","readerResult","result","totalWhiteList","DOMPurify","violations","len","match","RegExp","isValid","foundLength","Math","abs","onerror","abort","readAsText","validateFileNameIllegalChars","notifyValidationFailuresFileName","ext","getFileExtension","validateFileExtension","notifyValidationFailuresExtension","validateFileNameLength","notifyValidationFailuresFileNameLength","validateFileSize","notifyValidationFailuresSizeLimit","configValidateContent","validateFileContent","notifyValidationFailuresContent","notifyValidationSuccessContent","isPersistant","join","index","lastIndexOf","substring","input","filesRaw","configMultiple","elFileInput","value","validate","queueFileTransfers","rawFile","renderFileListItem","listItem","includes","readAsDataURL","el","querySelector","eventName","addEventListener","preventDefaults","highlight","unhighlight","handleDrop","handleSubmit","setAttribute","allowedFileTypes","endpoint","allowsMultiple","maxFileSize","validatePlainTextContent","allowedExtensions","textLabel","labelText","textButton","labelButton","elemIdFileInput","textAllowedExt","setDom"],"sourceRoot":""}