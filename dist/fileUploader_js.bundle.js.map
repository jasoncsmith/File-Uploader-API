{"version":3,"file":"fileUploader_js.bundle.js?ver=641c288b3a1d4c5e910f","mappings":"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","sources":["webpack://appLaunch/./src/utils/utilsNumber.js","webpack://appLaunch/./src/components/fileUploader/fileUploader.js","webpack://appLaunch/./src/utils/utilsObjects.js"],"sourcesContent":["export function formatBytes(bytes) {\n/* \nIt's convenient within the computer to organize things in groups of powers of\n2. For example, 2^10 is 1024, and so a program might group 1024 items \ntogether, as a sort of \"round\" number of things within the computer. The term \n\"kilobyte\" above refers to this group size of 1024 things. However, people \nalso group things by thousands -- 1 thousand or 1 million items.\nThere's this problem with the word \"megabyte\": does it mean 1024 * 1024 bytes,\ni.e. 2^20, which is 1,048,576, or does it mean exactly 1 million, 1000 * 1000.\nIt's just a 5% difference, but marketers tend to prefer the 1 million \ninterpretation, since it makes their hard drives etc. appear to hold a little\nbit more.\nhttps://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\n*/\n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i;\n \n    for (i = 0; bytes >= 1024 && i < 4; i++) {\n        bytes /= 1024;\n    }\n \n    return `${bytes.toFixed(1)}${units[i]}`;\n}","import './fileUploader.scss';\nimport {\n    containsIllegalfileNameChars,\n    jDefer\n} from '../../utils/utils.js';\nimport {\n    objMerge\n} from '../../utils/utilsObjects.js';\nimport {\n    formatBytes\n} from '../../utils/utilsNumber.js';\nimport DOMPurify from 'dompurify';\n\nconst hashSupportedExtToMIMEImage = {\n    jpg: 'image/jpeg',\n    jpeg: 'image/jpeg',\n    png: 'image/png',\n    gif: 'image/gif',\n    tif: 'image/tiff',\n    tiff: 'image/tiff',\n    bmp: 'image/bmp',\n    pdf: 'application/pdf'\n};\n\n\nconst whiteList = [];\nconst maxFileNameChars = 120;\nlet countInitializedInstances = 0; // when > 1 fileUploaders on same page\n\nfunction File(file) {\n    this.filename = file.name;\n    this.totalfilesize = file.size;\n    this.file = file;\n}\n\nfunction FileListItem(file) {\n    this.fileName = file.name;\n    this.src = null;\n    this.size = formatBytes(file.size);\n}\n\n\nexport default function () {\n    const kp = ko.postbox;\n    const self = this;\n\n    let elDropArea = null;\n    let elFileInput = null;\n\n    let queuedFileTransfers = [];\n    let allowedFileTypes = '*';\n\n    let configApi = null;\n    let configMultiple = false;\n    let configMaxFileSize = null;\n    let configValidateContent = false;\n    let configAllowedFileExtensions = [];\n\n    countInitializedInstances++;\n\n    self.fileListItems = ko.observableArray([]);\n    self.isFileReadyForUpload = ko.observable(null).extend({\n        notify: 'always'\n    });\n    self.selectedFileName = ko.observable(null);\n    self.elemIdFileInput = ko.observable('');\n    self.textButton = ko.observable(null);\n    self.textLabel = ko.observable(null);\n    self.textAllowedExt = ko.observable(null);\n    self.isWaiting = ko.observable(false);\n\n    function preventDefaults(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    function highlight() {\n        elDropArea.classList.add('file-upload__drop-area--is-dragover');\n    }\n\n    function unhighlight() {\n        elDropArea.classList.remove('file-upload__drop-area--is-dragover');\n    }\n\n    function validateFileSize({\n        size\n    }) {\n        return configMaxFileSize === null ? true : size <= configMaxFileSize;\n    }\n\n    function validateFileExtension(extension) {\n        return configAllowedFileExtensions.length === 0 ? true : configAllowedFileExtensions.indexOf(extension.toLowerCase()) !== -1;\n    }\n\n    function validateFileNameIllegalChars({\n        name\n    }) {\n        return containsIllegalfileNameChars(name) === false;\n    }\n\n    function validateFileNameLength({name}) {\n        return name.length <= maxFileNameChars;\n    }\n\n    function validateFileContent(file) {\n        const reader = new FileReader();\n        const prms = jDefer();\n\n        reader.readAsText(file);\n        reader.onloadend = function (e) {\n            const readerResult = e.target.result;\n            let totalWhiteList = 0;\n            \n            DOMPurify.sanitize(readerResult);\n            const violations = DOMPurify.removed;\n            // IF SANITIZED != READERRESULT AND VIOLATIONS.LENGTH > 0\n            // THIS MEANS DOMPURIFY ESCAPED CONTENT -- WE ARE NOT CONCERNED\n            // WITH THIS.\n\n            for (let i = 0, len = whiteList.length; i < len; i++) {\n                totalWhiteList += (readerResult.match(new RegExp(whiteList[i], 'gi')) || []).length;\n            }\n           \n            prms.complete({\n                isValid: violations.length === 0 || (violations.length > 0 && totalWhiteList === violations.length),\n                foundLength: Math.abs(violations.length - totalWhiteList)\n            });\n        };\n\n        return prms;\n    }\n\n    async function validate(file) {\n        if (validateFileNameIllegalChars(file) === false) {\n            notifyValidationFailuresFileName(file);\n            return false;\n        }\n\n        const ext = getFileExtension(file);\n        if (validateFileExtension(ext) === false) {\n            notifyValidationFailuresExtension(ext);\n            return false;\n        }    \n        \n        if (validateFileNameLength(file) === false) {\n            notifyValidationFailuresFileNameLength();\n            return false;\n        }\n\n        if (validateFileSize(file) === false) {\n            notifyValidationFailuresSizeLimit(file);\n            return false;\n        }    \n\n        if (configValidateContent === true && file.type === 'text/plain') {\n            const result = await validateFileContent(file);\n\n            if (result.isValid === false) {\n                notifyValidationFailuresContent(result.foundLength);\n                return false;\n            } else {\n                notifyValidationSuccessContent();\n            }\n        }\n\n        return true;\n    }\n\n    function notifyValidationFailuresSizeLimit({\n        name\n    }) {\n        kp.publish('add-application-message', {\n            type: 'invalid',\n            content: `File <strong>${name}</strong> exceeds the <strong>${formatBytes(configMaxFileSize)}</strong> size limit and will not be uploaded.`,\n            isPersistant: true\n        });\n    }\n\n    function notifyValidationFailuresExtension(ext) {\n        kp.publish('add-application-message', {\n            type: 'invalid',\n            content: `File type <strong>${ext}</strong> is not permitted, only <strong>${configAllowedFileExtensions.join(', ')}</strong> are accepted.`,\n            isPersistant: true\n        });\n    }\n\n    function notifyValidationFailuresFileName({\n        name\n    }) {\n        kp.publish('add-application-message', {\n            type: 'invalid',\n            content: `Please rename file <strong>${name}</strong>. Filenames cannot contain <strong>\\\\ / : * ? \" < > |</strong>`,\n            isPersistant: true\n        });\n    }\n\n    function notifyValidationFailuresFileNameLength() {\n        kp.publish('add-application-message', {\n            type: 'invalid',\n            content: `File name cannot exceed <strong>${maxFileNameChars}</strong> characters in length. Please shorten the file name.`,\n            isPersistant: true\n        });\n    }\n\n    function notifyValidationFailuresContent(foundLength) {\n        kp.publish('add-application-message', {\n            type: 'invalid',\n            content: `We were not able to validate this file. We have detected <strong>${foundLength} issue${foundLength === 1 ? '' : 's'}</strong>. Please contact support.`,\n            isPersistant: true\n        });\n    }\n\n    function notifyValidationSuccessContent() {\n        kp.publish('add-application-message', {\n            type: 'valid',\n            content: `Success. DOMPurify found 0 issues with this file`\n        });\n    }\n\n    function getFileExtension({\n        name\n    }) {\n        if (typeof name !== 'string') {\n            throw new Error('fileName must be a string');\n        }\n\n        const fileName = name;\n        const index = fileName.lastIndexOf('.');\n\n        if (index === -1) {\n            return '';\n        }\n\n        return `.${fileName.substring(index + 1, fileName.length)}`;\n    }\n\n    function handleDrop(e) {\n        setFiles(e.dataTransfer.files);\n    }\n\n    function handleSubmit(e) {\n        setFiles(e.target.files);\n    }\n\n    /**\n     * @param fileList input will be fileList or Event object\n     * @return undefined\n     */\n    async function setFiles(input) {\n        if (input.length === 0) {\n            return;\n        }\n        \n        const filesRaw = configMultiple === false ? [input[0]] : [...input];\n        \n        elFileInput.value = ''; // WE HAVE TO KEEP IT EMPTY OR YOU CANNOT UPLOAD A FILE YOU DELETED. EVERYTHING IS MANAGED IN THE que\n\n        if (configMultiple === false && input.length > 1) {\n            kp.publish('add-application-message', {\n                type: 'information',\n                content: `Only <strong>one file</strong> may be dropped at a time. <strong>${filesRaw[0].name}</strong> was accepted, the others have been removed.`\n            });\n        }\n\n        filesRaw.forEach(async f => {\n            if (await validate(f) === true) {\n                queueFileTransfers(f);\n            }\n        });\n    }\n\n    function queueFileTransfers(rawFile) {\n         // will be the one that is dragged or the last one. Only wil truly work in case of single\n        self.selectedFileName(rawFile.name);\n\n        configMultiple === false ?\n            queuedFileTransfers = [new File(rawFile)] :\n            queuedFileTransfers.push(new File(rawFile));\n\n        renderFileListItem(rawFile);\n\n        self.isFileReadyForUpload(true);\n    }\n\n    function renderFileListItem(file) {\n        const listItem = new FileListItem(file);\n\n        if (file.type.includes('image/')) {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onloadend = e => {\n                listItem.src = e.target.result;\n                configMultiple === false ? self.fileListItems([listItem]) :\n                    self.fileListItems.push(listItem);\n            };\n        } else {\n            configMultiple === false ? self.fileListItems([listItem]) :\n                self.fileListItems.push(listItem);\n        }\n    }\n\n    function setDom(el) {\n\n        elDropArea = el.querySelector('.file-upload__drop-area');\n        elFileInput = el.querySelector('.file-upload__input-file');\n\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            elDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n\n        ['dragenter', 'dragover'].forEach(eventName => {\n            elDropArea.addEventListener(eventName, highlight, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            elDropArea.addEventListener(eventName, unhighlight, false);\n        });\n\n        elDropArea.addEventListener('drop', handleDrop, false);\n\n        elDropArea.addEventListener('input', handleSubmit, false);\n\n        if (configMultiple === true) {\n            elFileInput.setAttribute('multiple', 'multiple');\n        }\n\n        if (configAllowedFileExtensions.length > 0) {\n            allowedFileTypes = configAllowedFileExtensions.join(',');\n        }\n\n        elFileInput.setAttribute('accept', `${allowedFileTypes}`);\n    }\n\n    function notifySuccess(args) {\n        kp.publish('add-application-message', {\n            type: 'valid',\n            content: `File ${args.filename} has been uploaded successfully`\n        });        \n    }\n\n    this.deleteQueuedFile = function (obj) {\n        const qf = queuedFileTransfers.find(f => f.filename === obj.fileName);\n\n        if (typeof qf === 'undefined') {\n            throw new Error('queued file transfer not found.');\n        }\n\n        queuedFileTransfers.splice(queuedFileTransfers.indexOf(qf), 1);\n\n        self.fileListItems.remove(obj);\n\n        self.isFileReadyForUpload(self.fileListItems().length > 0);\n\n        if (obj.fileName === self.selectedFileName()) {\n            self.selectedFileName(null);\n        }\n    };\n\n    /**\n     * reset - governing vm can invoke\n     * @param undefined\n     * @return undefined\n     */\n    this.reset = function () {\n        queuedFileTransfers = [];\n        self.fileListItems([]);\n        self.selectedFileName(null);\n        self.isFileReadyForUpload(false);\n        self.isWaiting(false);\n    };\n\n    this.uploadFile = function (args) {\n        args = args || {};\n        const uploads = [];\n\n        if (queuedFileTransfers.length === 0) {\n            return Promise.reject('Please select a file to upload.');\n        }\n\n        queuedFileTransfers.forEach(\n            ft => uploads.push(configApi(objMerge({}, ft)))\n        );\n\n        self.isWaiting(true);\n\n        return Promise.all(uploads)\n            .then(resp => resp.forEach(notifySuccess))\n            .catch(err => {\n                kp.publish('add-application-message', {\n                    type: 'invalid',\n                    content: err\n                });\n                self.isWaiting(false);\n            })\n            .finally(self.reset)\n\n    };\n\n    /**\n     * \n     * @param {boolean} allowsMultiple whether you can select multiple files\n     * @param {Element} el Element in which to insert template\n     * @param {string} endpoint api you want files to be sent\n     * @return undefined\n     */\n    this.initialize = function ({\n        el,\n        endpoint,\n        allowsMultiple,\n        allowedExtensions,\n        maxFileSize,\n        labelText,\n        labelButton,\n        validatePlainTextContent\n    }) {\n        configApi = endpoint;\n        configMultiple = allowsMultiple;\n        configMaxFileSize = maxFileSize;\n        configValidateContent = validatePlainTextContent;\n        configAllowedFileExtensions = allowedExtensions || [];\n\n        self.textLabel(labelText);\n        self.textButton(configMultiple === true ? `${labelButton}(s)` : labelButton);\n        self.elemIdFileInput(`file-elem-${countInitializedInstances}`);\n\n        if (configAllowedFileExtensions.length > 0) {\n            self.textAllowedExt(`Accepted: ${configAllowedFileExtensions.join(', ')}`);\n        }\n\n        setDom(el);\n    };\n}","/** \n* Properties in the target object are overwritten by \n* properties in the sources if they have the same key. \n* Later sources' properties overwrite earlier ones.\n\n* @param object target\n* @param object source\n* @return object merged target/source\n*/\nexport function objMerge(target, source) {\n    return Object.assign(target, source);\n}"],"names":["formatBytes","bytes","i","toFixed","whiteList","maxFileNameChars","countInitializedInstances","File","file","this","filename","name","totalfilesize","size","FileListItem","fileName","src","kp","ko","postbox","self","elDropArea","elFileInput","queuedFileTransfers","allowedFileTypes","configApi","configMultiple","configMaxFileSize","configValidateContent","configAllowedFileExtensions","preventDefaults","e","preventDefault","stopPropagation","highlight","classList","add","unhighlight","remove","handleDrop","setFiles","dataTransfer","files","handleSubmit","target","async","input","length","filesRaw","value","publish","type","content","forEach","rawFile","containsIllegalfileNameChars","validateFileNameIllegalChars","isPersistant","notifyValidationFailuresFileName","ext","Error","index","lastIndexOf","substring","getFileExtension","extension","indexOf","toLowerCase","join","notifyValidationFailuresExtension","foundLength","validateFileNameLength","validateFileSize","notifyValidationFailuresSizeLimit","result","reader","FileReader","prms","jDefer","readAsText","onloadend","readerResult","totalWhiteList","DOMPurify","violations","len","match","RegExp","complete","isValid","Math","abs","validateFileContent","validate","f","selectedFileName","push","listItem","includes","readAsDataURL","fileListItems","renderFileListItem","isFileReadyForUpload","notifySuccess","args","observableArray","observable","extend","notify","elemIdFileInput","textButton","textLabel","textAllowedExt","isWaiting","deleteQueuedFile","obj","qf","find","splice","reset","uploadFile","uploads","Promise","reject","ft","source","Object","assign","all","then","resp","catch","err","finally","initialize","el","endpoint","allowsMultiple","allowedExtensions","maxFileSize","labelText","labelButton","validatePlainTextContent","querySelector","eventName","addEventListener","setAttribute","setDom"],"sourceRoot":""}